#!/bin/bash
# Original version:
# See https://github.com/GaryJones/wordpress-plugin-svn-deploy for instructions and credits.
#
# Steps to deploying:
#
#  1. Ask for plugin slug.
#  2. Ask for local plugin directory.
#  3. Check local plugin directory exists.
#  4. Ask for main plugin file name.
#  5. Check main plugin file exists.
#  6. Check readme.txt version matches main plugin file version.
#  7. Ask for temporary SVN path.
#  8. Ask for remote SVN repo.
#  9. Ask for SVN username.
# 10. Ask if input is correct, and give chance to abort.
# 11. Check if Git tag exists for version number (must match exactly).
# 12. Checkout SVN repo.
# 13. Set to SVN ignore some GitHub-related files.
# 14. Export HEAD of master from git to the trunk of SVN.
# 15. Initialise and update and git submodules.
# 16. Move /trunk/assets up to /assets.
# 17. Move into /trunk, and SVN commit.
# 18. Move into /assets, and SVN commit.
# 19. Copy /trunk into /tags/{version}, and SVN commit.
# 20. Delete temporary local SVN checkout.

echo
echo "hCaptcha WordPress Plugin SVN Deploy v3.0.0"
echo
echo "Default values are in brackets - just hit enter to accept them."
echo

# Set up some default values. Feel free to change these in your own script
PLUGIN_SLUG="hcaptcha-for-forms-and-more"
CURRENT_DIR=$(pwd)
default_svn_path="/tmp/$PLUGIN_SLUG"
default_svn_url="https://plugins.svn.wordpress.org/$PLUGIN_SLUG"
#default_svn_url="https://svn.kagg.eu/$PLUGIN_SLUG" # Test svn url.
default_svn_user="hcaptcha"
#default_svn_user="kagg" # Test svn user.
default_plugin_dir=$(dirname "$CURRENT_DIR/..")
default_main_file="hcaptcha.php"

echo "Q1. WordPress Repo Plugin Slug e.g. my-awesome-plugin."
echo "($PLUGIN_SLUG)"
echo

echo "Q2. Your local plugin root directory (the Git repo)."
printf "(%s): " "$default_plugin_dir"
read -re input
input="${input%/}" # Strip trailing slash
PLUGIN_DIR="${input:-$default_plugin_dir}" # Populate with default if empty
echo

# Check directory exists.
if [ ! -d "$PLUGIN_DIR" ]; then
  echo "Directory $PLUGIN_DIR not found. Aborting."
  exit 1;
fi

echo "Q3. Name of the main plugin file."
printf "(%s): " "$default_main_file"
read -re input
MAIN_FILE="${input:-$default_main_file}" # Populate with default if empty
echo

# Check main plugin file exists.
if [ ! -f "$PLUGIN_DIR/$MAIN_FILE" ]; then
  echo "Plugin file $PLUGIN_DIR/$MAIN_FILE not found. Aborting."
  exit 1;
fi

echo "Checking version in main plugin file matches version in readme.txt file..."
echo

# Check version in readme.txt is the same as plugin file after translating both to Unix line breaks to work around grep's failure to identify Mac line breaks
PLUGIN_VERSION=$(grep -i "Version:" "$PLUGIN_DIR"/"$MAIN_FILE" | awk -F' ' '{print $NF}' | tr -d '\r')
echo "$MAIN_FILE version: $PLUGIN_VERSION"
README_VERSION=$(grep -i "Stable tag:" "$PLUGIN_DIR"/readme.txt | awk -F' ' '{print $NF}' | tr -d '\r')
echo "readme.txt version: $README_VERSION"

if [ "$README_VERSION" = "trunk" ]; then
	echo "Version in readme.txt & $MAIN_FILE don't match, but Stable tag is trunk. Let's continue..."
elif [ "$PLUGIN_VERSION" != "$README_VERSION" ]; then
	echo "Version in readme.txt & $MAIN_FILE don't match. Exiting...."
	exit 1;
elif [ "$PLUGIN_VERSION" = "$README_VERSION" ]; then
	echo "Versions match in readme.txt and $MAIN_FILE. Let's continue..."
fi

echo

echo "Q4. Path to a local directory where a temporary SVN checkout can be made."
printf "Don't add trunk (%s): " "$default_svn_path"
read -re input
input="${input%/}" # Strip trailing slash
SVN_PATH="${input:-$default_svn_path}" # Populate with default if empty
echo

echo "Q5. Remote SVN repo on WordPress.org."
printf "(%s): " "$default_svn_url"
read -re input
input="${input%/}" # Strip trailing slash
SVN_URL="${input:-$default_svn_url}" # Populate with default if empty
echo

echo "Q6. Your WordPress repo SVN username."
printf "(%s): " "$default_svn_user"
read -re input
SVN_USER="${input:-$default_svn_user}" # Populate with default if empty
echo

echo "That's all of the data collected."
echo
echo "Slug: $PLUGIN_SLUG"
echo "Plugin directory: $PLUGIN_DIR"
echo "Main file: $MAIN_FILE"
echo "Temp checkout path: $SVN_PATH"
echo "Remote SVN repo: $SVN_URL"
echo "SVN username: $SVN_USER"
echo

printf "OK to proceed (Y|n)? "
read -re input
PROCEED="${input:-y}"
echo

# Allow user cancellation
if [ "$(echo "$PROCEED" |tr '[:upper:]' '[:lower:]')" != "y" ]; then echo "Aborting..."; exit 1; fi

# Let's begin...
echo ".........................................."
echo
echo "Preparing to deploy WordPress plugin"
echo
echo ".........................................."
echo

echo

echo "Changing to $PLUGIN_DIR"
cd "$PLUGIN_DIR" || exit 1

# Check for git tag (may need to allow for leading "v"?)
# if git show-ref --tags --quiet --verify -- "refs/tags/$PLUGIN_VERSION"
if git show-ref --tags --quiet --verify -- "refs/tags/$PLUGIN_VERSION"
	then
		echo "Git tag $PLUGIN_VERSION does exist. Let's continue..."
	else
		echo "$PLUGIN_VERSION does not exist as a git tag. Aborting.";
		exit 1;
fi

echo

echo "Creating local copy of SVN repo trunk..."
svn checkout "$SVN_URL" "$SVN_PATH" --depth immediates
svn update --quiet "$SVN_PATH"/trunk --set-depth infinity

# Copy from current branch to /trunk, excluding dotorg assets
# The --delete flag will delete anything in destination that no longer exists in source
rsync -rc --exclude-from=".distignore" . "$SVN_PATH"/trunk/ --delete --delete-excluded

#Copy assets
rsync -rc assets/ "$SVN_PATH"/assets/ --delete

echo

svn add --force "$SVN_PATH"/assets/

echo

echo "Changing directory to SVN and committing to trunk."
cd "$SVN_PATH"/trunk/ || exit 1
# Delete all files that should not now be added.
svn status | grep -v "^.[ \t]*\..*" | grep "^\!" | awk '{print $2"@"}' | xargs svn del > /dev/null 2>&1
# Add all new files that are not set to be ignored
svn status | grep -v "^.[ \t]*\..*" | grep "^?" | awk '{print $2"@"}' | xargs svn add > /dev/null 2>&1
svn commit --username="$SVN_USER" -m "Preparing for $PLUGIN_VERSION release"

echo

echo "Updating WordPress plugin repo assets and committing."
cd "$SVN_PATH"/assets/ || exit 1
# Delete all new files that are not set to be ignored
svn status | grep -v "^.[ \t]*\..*" | grep "^\!" | awk '{print $2"@"}' | xargs svn del > /dev/null 2>&1
# Add all new files that are not set to be ignored
svn status | grep -v "^.[ \t]*\..*" | grep "^?" | awk '{print $2"@"}' | xargs svn add > /dev/null 2>&1
svn update --quiet --accept working "$SVN_PATH"/assets/*
svn resolve --accept working "$SVN_PATH"/assets/*
svn commit --username="$SVN_USER" -m "Updating assets"

echo

echo "Creating new SVN tag and committing it."
cd "$SVN_PATH" || exit 1
svn copy --quiet trunk/ tags/"$PLUGIN_VERSION"/ > /dev/null 2>&1
# Remove assets and trunk directories from tag directory
svn update --quiet --accept working "$SVN_PATH"/tags/"$PLUGIN_VERSION"
#svn resolve --accept working $SVN_PATH/tags/$PLUGIN_VERSION/*
cd "$SVN_PATH"/tags/"$PLUGIN_VERSION" || exit 1
svn commit --username="$SVN_USER" -m "Tagging version $PLUGIN_VERSION"

echo

echo "Removing temporary directory $SVN_PATH."
cd "$SVN_PATH" || exit 1
cd ..
rm -rf "${SVN_PATH:?}/"*

echo "*** FIN ***"
